// common.js

const Common = `

type customfield {
id: ID! @isUnique
active: Boolean
# The field’s name
name: String
field_type: String
# Numeric field used for ordering
priority: Int
# Boolean value to say if this field is private
private: Boolean
# The object this field exists on can not be saved if this value is not set.
required: Boolean
require_approval: Boolean
# One of short_text, long_text, yes_no, single_select, multi_select, currency, currency_range, number, number_range, date, url, etc
value_type: String
custom_field_options: [custom_field_option]
}

type custom_field_option {
id: ID! @isUnique
name: String
# Numeric value used for ordering the custom field options.
priority: Int
}



# A person’s email address.
type emailAddress {
metadata: emailMetadata
# The email address
value: String
}

type emailMetadata {
# Is primary email?
primary: Boolean
# Is a verified email?
verified: Boolean
source: source
}


type photo {
			id: ID! @isUnique
 }


# emailMetadata
type metadataEmail {
  # Is primary email?
  primary: Boolean
  # Is a verified email?
  verified: Boolean
  # The The source of a field.
  source: typeEmail
}


# The type of the email address. The type can be custom or predefined. Possible values include, but are not limited to, the following:
type typeEmail {
  # The type of the email address. The type can be custom or predefined. Possible values include, but are not limited to, the following:
  type: EMAIL_TYPE
  # The unique identifier within the source type generated by the server.
  id: String
}


# Metadata
type metadata {
  # is primary
  primary: Boolean
  source: source
}


  
type recordTimes {

# The creation timestamp of an entity.
create_time: String
# The last update timestamp of an entity. Note: update_time is updated when create/patch/delete operation is performed.
update_time: String
# The deletion timestamp of an entity, only if it supports retention.
delete_time: String
# The expiration timestamp of an entity if it happens to expire.
expire_time: String
#The timestamp marking the beginning of some time period.
start_time: String
#The timestamp marking the end of some time period or operation (regardless of its success).
end_time: String
#The time of disable
disable_at: String

}


# Date, Represents a whole calendar date, for example a date of birth. The time of day and time zone are either specified elsewhere or are not significant. The date is relative to the Proleptic Gregorian Calendar. The day may be 0 to represent a year and month where the day is not significant. The year may be 0 to represent a month and day independent of year; for example, anniversary date
type date {
  # Day of month. Must be from 1 to 31 and valid for the year and month, or 0 if specifying a year/month where the day is not significant.
  day: Int
  # Month of year. Must be from 1 to 12.
  month: Int
  # Year of date. Must be from 1 to 9999, or 0 if specifying a date without a year.
  year: Int
}

# Locale
type locale {
  metadata: metadata
  # The well-formed IETF BCP 47 language tag representing the locale.
  value: String
}

# Source
type source {
  # Type Example: Account
  type: String
  id: ID
}

# A website
type website {
  name: String
  url: String

}

# A domain
type domain {
 name: String
 isPrimary: Boolean
}


# A Social Account
interface socialAccount {
#Service Resource name (e.g. urn:social:facebook)
urn: String
profileUrl: String
slugHandle: String

}

# Twitter
type twitterAccount implements socialAccount {

#Service Resource name (e.g. urn:social:facebook)
urn: String
profileUrl: String
slugHandle: String

followers: timeSeriesMetric
}

# Facebook
type facebookAccount implements socialAccount {

#Service Resource name (e.g. urn:social:facebook)
urn: String
profileUrl: String
slugHandle: String

# Facebook Likes metrics
  likes: timeSeriesMetric
# Facebook Talking metrics
  talking: timeSeriesMetric
}

# Linkedin
type linkedinAccount implements socialAccount {

#Service Resource name (e.g. urn:social:facebook)
urn: String
profileUrl: String
slugHandle: String

# Linkedin Followers metrics
followers: timeSeriesMetric

}


# Summary metrics as well as raw data points
type timeSeriesMetric {

# Current metric value
current: Int

# Value of metric 7 days ago
weekAgo: Int

# Value of metric one month ago
monthAgo: Int

# Value of metric six months ago
sixMonthsAgo: Int

# Value of metric twelve months ago
yearAgo: Int

# Week over week growth (percent)
wowGrowth: Int

# Month over month growth (percent)
momGrowth: Int

# Year over year growth (percent)
yoyGrowth: Int

# Raw data points
points(limit: Int): [timeSeriesMetricPoint]

}


# Raw metric data point
type timeSeriesMetricPoint {

# Value record
value: Int
# Time recorded at
at: dateTime

}


# ISO8601 DateTime
type dateTime {
value: String
}



# A geographic location
type location {

# Descriptive name for location
name: String

# City
city: city

# State
state: state

# Zip Code
zip: zip

# Country
country: country

# Continent
continent: continent

# Region
region: region

}


# An Address
 type address {
  # PlaceId from https://developers.google.com/places/place-id?authuser=2
  place: String
 }


# A City
type city {
# Descriptive name for city
name: String
}

# A State
type state {
# Two character abbreviation (e.g. CA, AZ, etc)
iso2: String
}

# A Zip Code
type zip {
# Zip Code
name: String
}

# A Country
type country {
# Three character abbreviation for country
iso3: String
}

# A Continent
type continent {
# Name of continent
name: String
# Three character abbreviation for Continent
iso3: String
}

# A Region
type region {
# Descriptive name for region
name: String
}


`;

export default Common;